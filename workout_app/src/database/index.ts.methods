/**
 * Gets workout entries by day ID
 * @param dayId Day ID
 */
async getWorkoutEntriesByDayId(dayId: number): Promise<WorkoutEntry[]> {
  if (!this.db) {
    throw new Error('Database not initialized');
  }

  try {
    const [results] = await this.db.executeSql(
      `SELECT we.*, e.name, e.isCompound, e.description, e.restPeriod
       FROM ${TABLES.WORKOUT_ENTRY} we
       LEFT JOIN ${TABLES.EXERCISE} e ON we.exercise_id = e.id
       WHERE we.day_id = ?`,
      [dayId]
    );

    const entries: WorkoutEntry[] = [];
    for (let i = 0; i < results.rows.length; i++) {
      const row = results.rows.item(i);
      entries.push({
        id: row.id,
        day_id: row.day_id,
        exercise_id: row.exercise_id,
        sets: row.sets,
        reps: row.reps,
        isCompleted: !!row.isCompleted,
        exercise: {
          id: row.exercise_id,
          name: row.name,
          isCompound: !!row.isCompound,
          description: row.description,
          restPeriod: row.restPeriod,
        },
      });
    }
    return entries;
  } catch (error) {
    console.error('Error fetching workout entries by day ID:', error);
    throw error;
  }
}

/**
 * Update a workout entry
 * @param entry WorkoutEntry object with id
 */
async updateWorkoutEntry(entry: WorkoutEntry): Promise<void> {
  if (!this.db) {
    throw new Error('Database not initialized');
  }
  
  if (!entry.id) {
    throw new Error('Entry ID is required for update');
  }

  try {
    await this.db.executeSql(
      `UPDATE ${TABLES.WORKOUT_ENTRY} 
       SET sets = ?, reps = ?, isCompleted = ?
       WHERE id = ?`,
      [
        entry.sets,
        entry.reps,
        entry.isCompleted ? 1 : 0,
        entry.id,
      ]
    );
  } catch (error) {
    console.error('Error updating workout entry:', error);
    throw error;
  }
}
